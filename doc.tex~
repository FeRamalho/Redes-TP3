\documentclass[10pt]{article}

% Packages used
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[margin=1in]{geometry}
\usepackage{color}
\usepackage{hyperref}
\usepackage{graphicx}
\title{\LARGE \textbf{\uppercase{REDES DE COMPUTADORES\\Trabalho prático 2}} }
\date{2 de setembro 2017}
\author{Rafael Rubbioli : 2014124838\\
\and Fernanda Ramalho : 2014106368 \\ Departamento de Ciência da computação, UFMG}
\begin{document}
	\maketitle
	\section{Introdução}
		Este trabalho tem o objetivo de implementar uma rede de troca de dados chave-valor por meio de uma conexão sem o uso de um servidor. Para isso usaremos um sistema chamado peer-to-peer. Além disso usaremos a linguagem Python e usaremos o UDP.
	\section{Conceitos}
		\subsection{UDP}
			O UDP é um protocolo que, diferentemente do TCP, tenta se tornar o mais simples possível, com o intuito de se tornar mais eficiente. Por isso, não tem garantias de entrega de mensagens ou three-way-handshake. Além disso, não podemos mais ler quantos bytes quisermos, devemos ler exatamente a mesma quantidade que havia sido enviada.
		\subsection{Peer-to-peer} 
			Usaremos uma técnica de inundação semelhante à usada no OSPF. Toda vez que um peer receber uma mensagem de inundação ele decrementará seu time to live e enviará para todos as outras peers que ela conhecer até que este time to live seja 0.
		\subsection{Chave-valor}
			O servlet de entrada receberá uma arquivo de texto com chaves e valores da forma:
\newline			rtmp           1/ddp      \# Routing Table Maintenance Protocol
\newline onde o 'rtmp' representa a chave e '1/ddp      \# Routing Table Maintenance Protocol' representa o seu valor. Ele deverá armazenar esse valor em um banco e retornar o valor sempre que receber a chave.
	\section{Implementação}
		O trabalho consiste de duas partes: o client e o servlet(server-client).
		\subsection{Client}
			O cliente faz a interação com o usuário a partir de uma interface com as seguintes opções:\\
	=========================================\\
	O que deseja fazer?\\
	?  + chave = Consulta por uma chave\\
	T          = Consulta a topologia da rede\\
	Q          = Terminar\\
	=========================================\\
			Ao ler uma '?', o cliente envia ao servlet uma requisição de chave e espera por 4 segundos por uma resposta. Caso nenhuma resposta chegue, ele deve reenviar apenas uma vez e esperar por mais 4 segundos. Ao receber a primeira resposta o cliente imprime todas as respostas na tela que receber nos próximos 4 segundos.
			O cliente, além disso, confere as repostas de acordo com um número de sequência que ele gera para cada mensagem que manda ao servlet.
			\newline Ao ler um T, o cliente envia uma requisição ao servlet para saber a topologia da rede. Ele então espera pela resposta, assim como na consulta pela chave. Ele vai mostrar a resposta que receber de cada servlet na tela, que contém todos os nós que passaram por eles até chegar no servlet que mandou a mensagem para o cliente.
		\subsection{Servlet}
			O servlet recebe as requisições do cliente e envia as respostas. Caso seja uma requisição de chave ele envia o valor (caso tenha a chave em seu banco). Caso seja uma requisição de topologia da rede ele envia uma mensagem com seu IP:PORTO.
			Por outro lado, a parte mais importante do servlet é a inundação. Quando o servlet faz o envio da mensagem de reposta para o cliente, ele também inicia uma inundação enviando uma mensagem com a chave desejada ou com a requisição de topologia com o endereço do cliente que fez a requisição inicial. Assim, todos os outros servlets que receberem também podem responder o cliente com os valores da chave ou com o seu IP:PORTO anexado ao fim da mensagem de resposta.
			\newline Obs: O servlet é rodado no IP local, por isso na hora de fazer o bind do socket na porta recebida, ele já é feito no IP 127.0.0.1.
		\subsection{Formato das mensagens}
\begin{itemize}

\item \textbf{KEYREQ} tipo = 5 (2 bytes) + número de sequência (4 bytes) + chave (até 400 carácteres)
\item \textbf{TOPOREQ} tipo = 6 (2 bytes) + número de sequência (4 bytes) 
\item \textbf{KEYFLOOD, TOPOFLOOD} tipo = 7 (key)/8 (topo) (2 bytes) + tempo de vida (2 bytes) + número de sequência (4 bytes) + IP origem(4 bytes) + porto origem (2 bytes) + info (até 400 carácteres)
\item \textbf{RESP} tipo = 9 (2 bytes) + número de sequência (4 bytes) + chave ( até 400 carácteres)
\end{itemize}
\section{Funcionamento}
Esse TP foi desenvolvido em Python3.
\newline O servlet deve ser rodado da seguinte forma:
\newline python3 servlet.py <porto-local> <arquivo-banco-chave> [ip1:porto1[ip2:porto2...]]
\newline Já o cliente deve ser rodado assim:
\newline python3 client.py <ip:porto>
		\section{Testes}
			Os testes foram feitos usando topologias de redes diferentes com servlets usando arquivos de chaves-valor diferentes. Assim foi possível verificar a corretude do programa de maneira mais eficiente.
		\section{Conclusão} 
			Foi implementado um sistema peer-to-peer usando o protocolo UDP na linguagem python. Com isso, foram notadas as principais diferenças entre UDP e TCP como a forma de conectar-se ao porto e a troca de mensagens. Além disso, foi usado inundação e notou-se que o processo é 
\end{document}
